package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yz.books.db.ThematicDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "special_topic_resource".
*/
public class ThematicDetailDao extends AbstractDao<ThematicDetail, Long> {

    public static final String TABLENAME = "special_topic_resource";

    /**
     * Properties of entity ThematicDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "id");
        public final static Property CategoryId = new Property(1, Integer.class, "categoryId", false, "specialTopicId");
        public final static Property Type = new Property(2, String.class, "type", false, "type");
        public final static Property Author = new Property(3, String.class, "author", false, "author");
        public final static Property CoverImg = new Property(4, String.class, "coverImg", false, "coverImg");
        public final static Property ResourceName = new Property(5, String.class, "resourceName", false, "resourceName");
        public final static Property ResourceId = new Property(6, Integer.class, "resourceId", false, "resourceId");
    }


    public ThematicDetailDao(DaoConfig config) {
        super(config);
    }
    
    public ThematicDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ThematicDetail entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(5, coverImg);
        }
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(6, resourceName);
        }
 
        Integer resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindLong(7, resourceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ThematicDetail entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(5, coverImg);
        }
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(6, resourceName);
        }
 
        Integer resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindLong(7, resourceId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ThematicDetail readEntity(Cursor cursor, int offset) {
        ThematicDetail entity = new ThematicDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // resourceName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // resourceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ThematicDetail entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResourceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResourceId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ThematicDetail entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ThematicDetail entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ThematicDetail entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
