package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yz.books.db.Books;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "books".
*/
public class BooksDao extends AbstractDao<Books, Long> {

    public static final String TABLENAME = "books";

    /**
     * Properties of entity Books.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "bookId");
        public final static Property BookName = new Property(1, String.class, "bookName", false, "bookName");
        public final static Property CoverImg = new Property(2, String.class, "coverImg", false, "coverImg");
        public final static Property Author = new Property(3, String.class, "author", false, "author");
        public final static Property BookType = new Property(4, String.class, "bookType", false, "bookType");
        public final static Property CategoryId = new Property(5, int.class, "categoryId", false, "categoryId");
    }


    public BooksDao(DaoConfig config) {
        super(config);
    }
    
    public BooksDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Books entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(3, coverImg);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String bookType = entity.getBookType();
        if (bookType != null) {
            stmt.bindString(5, bookType);
        }
        stmt.bindLong(6, entity.getCategoryId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Books entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(2, bookName);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(3, coverImg);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String bookType = entity.getBookType();
        if (bookType != null) {
            stmt.bindString(5, bookType);
        }
        stmt.bindLong(6, entity.getCategoryId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Books readEntity(Cursor cursor, int offset) {
        Books entity = new Books( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookType
            cursor.getInt(offset + 5) // categoryId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Books entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategoryId(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Books entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Books entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Books entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
