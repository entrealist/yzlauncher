package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yz.books.db.Journals;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "journals".
*/
public class JournalsDao extends AbstractDao<Journals, Long> {

    public static final String TABLENAME = "journals";

    /**
     * Properties of entity Journals.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "journalId");
        public final static Property JournalName = new Property(1, String.class, "journalName", false, "journalName");
        public final static Property CoverImg = new Property(2, String.class, "coverImg", false, "coverImg");
        public final static Property CategoryId = new Property(3, int.class, "categoryId", false, "categoryId");
    }


    public JournalsDao(DaoConfig config) {
        super(config);
    }
    
    public JournalsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Journals entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String journalName = entity.getJournalName();
        if (journalName != null) {
            stmt.bindString(2, journalName);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(3, coverImg);
        }
        stmt.bindLong(4, entity.getCategoryId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Journals entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String journalName = entity.getJournalName();
        if (journalName != null) {
            stmt.bindString(2, journalName);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(3, coverImg);
        }
        stmt.bindLong(4, entity.getCategoryId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Journals readEntity(Cursor cursor, int offset) {
        Journals entity = new Journals( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // journalName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverImg
            cursor.getInt(offset + 3) // categoryId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Journals entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJournalName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoryId(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Journals entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Journals entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Journals entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
